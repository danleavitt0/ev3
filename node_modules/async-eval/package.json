{
  "_args": [
    [
      "async-eval",
      "/Users/9dots/Repositories/ev3"
    ]
  ],
  "_from": "async-eval@*",
  "_id": "async-eval@0.1.5",
  "_inCache": true,
  "_location": "/async-eval",
  "_npmUser": {
    "email": "dallonfdev@gmail.com",
    "name": "dallonf"
  },
  "_npmVersion": "1.1.65",
  "_phantomChildren": {},
  "_requested": {
    "name": "async-eval",
    "raw": "async-eval",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/async-eval/-/async-eval-0.1.5.tgz",
  "_shasum": "0096e068b38388ae99396d77ec5852ac62c57e07",
  "_shrinkwrap": null,
  "_spec": "async-eval",
  "_where": "/Users/9dots/Repositories/ev3",
  "author": {
    "name": "Dallon Feldner"
  },
  "dependencies": {
    "underscore": ">= 1.3.0"
  },
  "description": "Execute arbitrary JS with callbacks",
  "devDependencies": {
    "chai": "*",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "0096e068b38388ae99396d77ec5852ac62c57e07",
    "tarball": "http://registry.npmjs.org/async-eval/-/async-eval-0.1.5.tgz"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "homepage": "https://github.com/dallonf/async-eval",
  "installable": true,
  "main": "index.js",
  "maintainers": [
    {
      "name": "dallonf",
      "email": "dallonfdev@gmail.com"
    }
  ],
  "name": "async-eval",
  "optionalDependencies": {},
  "readme": "# async-eval\r\n\r\nExecute arbitrary JS with callbacks in node.js. Also counts asynchronous operations and does not return until all callbacks have been executed.\r\n\r\nNote: This library actually uses `vm.runInNewContext()` instead of `eval()` for a bit more added security, though it doesn't fork a process, so it's best used with trusted code.\r\n\r\n## Installation\r\n\r\n    npm install async-eval\r\n    npm test\r\n\r\nor\r\n\r\n    git clone https://github.com/dallonf/async-eval\r\n    npm install\r\n    npm test \r\n\r\n## Example usage\r\n\r\n    var asyncEval = require('async-eval');\r\n\r\n    var someObject = {x: 5, y: 10};\r\n\r\n    function waitOneSecond(callback) {\r\n      setTimeout(callback, 1000);\r\n    }\r\n\r\n    var options = {\r\n      this: someObject,\r\n      asyncFunctions: {\r\n        waitOneSecond: waitOneSecond\r\n      }\r\n    }\r\n\r\n    asyncEval('waitOneSecond(function() { this.x += 2; });', options, function() {\r\n      console.log(someObject.x); // 7\r\n    });\r\n\r\n## Usage\r\n\r\n    asyncEval(code, [options], [callback])\r\n\r\nasyncEval() will interpret and execute `code` and run `callback` when the code and every asynchronous function it calls has finished running.\r\n\r\n## Options\r\n\r\n**this**\r\n\r\n*Default: {}*\r\n\r\nSets the object that will be used as `this` in the executed code and any nested callbacks.\r\n\r\n**context**\r\n\r\n*Default: {}*\r\n\r\nSets the global context in the executed code. Put any synchronous DSL functions and global variables here.\r\n\r\n**asyncFunctions**\r\n\r\n*Default: {}*\r\n\r\nRegisters asynchronous functions into the `context`. Asynchronous functions must be listed in the `asyncFunctions` property so that asyncEval can count pending callbacks.\r\n\r\nThe functions registered in `asyncFunctions` must take a callback as the last argument.\r\n\r\n These functions can be namespaced with objects, for example:\r\n\r\n    asyncFunctions: {\r\n      users: {\r\n        get: function(callback) { /* ... */ },\r\n        create: function(user, callback) { /* ... */ },\r\n      },\r\n      posts: {\r\n        get: function(callback) { /* ... */ },\r\n        create: function(post, callback) { /* ... */ },\r\n      }\r\n    }\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dallonf/async-eval.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.1.5"
}

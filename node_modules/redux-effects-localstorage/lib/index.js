'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Action type
 */

var EFFECT_LOCALSTORAGE = 'EFFECT_LOCALSTORAGE';

/**
 * redux-effects-localstorage
 */

function storage(localStorage) {
  return function (api) {
    return function (next) {
      return function (action) {
        return action.type === EFFECT_LOCALSTORAGE ? execute(action.payload) : next(action);
      };
    };
  };

  function execute(_ref) {
    var type = _ref.type;
    var key = _ref.key;
    var value = _ref.value;
    var n = _ref.n;

    switch (type) {
      case 'key':
        return Promise.resolve(localStorage.key(n));
      case 'getItem':
        return Promise.resolve(localStorage.getItem(key));
      case 'setItem':
        return Promise.resolve(localStorage.setItem(key, value));
      case 'removeItem':
        return Promise.resolve(localStorage.removeItem(key, value));
      case 'clear':
        return Promise.resolve(localStorage.clear());
      case 'length':
        return Promise.resolve(localStorage.length);
      default:
        throw new Error('redux-effects-localstorage unknown localStorage action type');
    }
  }
}

/**
 * Action creator
 */

function createAction(payload) {
  return {
    type: EFFECT_LOCALSTORAGE,
    payload: payload
  };
}

function key(n) {
  return createAction({ type: 'key', n: n });
}

function getItem(key) {
  return createAction({ type: 'getItem', key: key });
}

function setItem(key, value) {
  return createAction({ type: 'setItem', key: key, value: value });
}

function removeItem(key) {
  return createAction({ type: 'removeItem', key: key });
}

function clear() {
  return createAction({ type: 'clear' });
}

function getLength() {
  return createAction({ type: 'length' });
}

/**
 * Exports
 */

exports.default = storage;
exports.key = key;
exports.getItem = getItem;
exports.setItem = setItem;
exports.removeItem = removeItem;
exports.clear = clear;
exports.getLength = getLength;